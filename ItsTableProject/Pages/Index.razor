@page "/"
@using Google.Apis.Auth.OAuth2
@using Google.Apis.Drive.v2
@using Google.Apis.Services
@using Google.Apis.Sheets.v4

<h1>Its Table Project</h1>
<div class=selected_items>
    <table class="table table-striped">
        <thead class="table-dark">
            <tr>
                <th scope="col">Тип</th>
                <th scope="col">Сумма</th>
                <th scope="col">Фонд</th>
                <th scope="col">Что</th>
                <th scope="col">Персона</th>
                <th scope="col">Месяц</th>
                <th scope="col">Номер месяца</th>
                <th scope="col">Дата</th>
                <th scope="col">Комментарий (необязательно)</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>
                    <select @bind="type">


                        @for (int i = 1; i < @val[1].Count; i++)
                        {
                            @if (@val[@i][1] != "")
                            {
                                <option>@val[@i][1]</option>
                            }
                        }
                    </select>
                </td>
                    
                <td>
                    <input type="number" @bind-value="summ">
                </td>
                   
                <td>
                    <select @bind="fond">


                        @for (int i = 1; i < @val[0].Count; i++)
                        {
                            @if (@val[@i][0] != "")
                            {
                                <option>@val[@i][0]</option>
                            }
                        }
                    </select>
                </td>

                <td>
                    <select @bind="what">
                        @for(int i = 1; i < @val[2].Count; i++)
                        {
                            @if (@val[@i][2] != "")
                            {
                                <option>@val[@i][2]</option>
                            }
                        }
                    </select>
                </td>

                <td>
                        <select @bind="person">


                            @for (int i = 1; i < @val[4].Count; i++)
                            {
                                @if (@val[@i][4] != "")
                                {
                                    <option>@val[@i][4]</option>
                                }
                            }
                        </select>
                </td>

                <td>
                    <select @bind="month">


                        @for (int i = 1; i < @val[8].Count; i++)
                        {
                            @if (@val[@i][8] != "")
                            {
                                <option>@val[@i][8]</option>
                            }
                        }
                    </select>
                </td>

                <td>
                    <select @bind="number_month">


                        @for (int i = 1; i < @val[9].Count; i++)
                        {
                            @if (@val[@i][9] != "")
                            {
                                <option>@val[@i][9]</option>
                            }
                        }
                    </select>
                </td>

                <td>
                    <input type="date" @bind-value="date">
                </td>

                <td>
                    <input type="text" @bind-value="comm">
                </td>
            </tr>
        </tbody>
    </table>
</div>

    <Input type="submit" class="btn" @onclick="ok">
        <h3>@sub</h3>

<style>
    .btn{
        width:250px;
        background:#26261a;
        padding: 1px 7px 2px;
        color: white;
    }
    .btn:hover{
        width:250px;
        background:#26261a;
        padding: 1px 7px 2px;
        color: white;
    }
</style>
@code{
    List<string> like = new List<string>();
    string fond="Фонд основателя";
    int summ = 0;
    string type = "доход";
    string what = "Налоги";
    string person = "DS";
    DateTime date = DateTime.Now;
    string month="январь";
    string number_month = "1";
    string comm;
    string sub;
    IList<IList<object>> val = RunAsync();

    List<string> lines = new List<string>();

    static IList<IList<object>> RunAsync()
    {

        // Create the service.
        string[] Scopes = new string[] {SheetsService.Scope.Spreadsheets,DriveService.Scope.Drive };
        string sheet = "ДДС";
        string secondsheet = "Источники (списки)";
        string id = "1r3UZ4Hh3d2FepCK3N2pBccXVh2YCek0bSYb8pR82G_w";

        GoogleCredential credential;
        using (var stream = new FileStream("wwwroot/cr1.json", FileMode.Open, FileAccess.Read))
        {
            credential = GoogleCredential.FromStream(stream)
                .CreateScoped(Scopes);
        }

        // Create the service.
        var service = new SheetsService(new BaseClientService.Initializer()
    {
        HttpClientInitializer = credential,
        ApplicationName = "ItsTableProject",
    });
        var range = $"{secondsheet}!A:J";
        var req = service.Spreadsheets.Values.Get(id, range);
        var res = req.Execute();
        var val = res.Values;
        return val;





    }
    public void ok()
    {

        string[] Scopes = new string[] {SheetsService.Scope.Spreadsheets,DriveService.Scope.Drive };
        string sheet = "ДДС";
        string secondsheet = "Источники (списки)";
        string id = "1r3UZ4Hh3d2FepCK3N2pBccXVh2YCek0bSYb8pR82G_w";

        GoogleCredential credential;
        using (var stream = new FileStream("wwwroot/cr1.json", FileMode.Open, FileAccess.Read))
        {
            credential = GoogleCredential.FromStream(stream)
                .CreateScoped(Scopes);
        }

        // Create the service.
        var service = new SheetsService(new BaseClientService.Initializer()
    {
        HttpClientInitializer = credential,
        ApplicationName = "ItsTableProject",
    });

        var range1 = $"{sheet}!A:A";
        var req1 = service.Spreadsheets.Values.Get(id, range1);
        var res1 = req1.Execute();
        int row = res1.Values.Count+1;
        var range = $"{sheet}!A{row}:I{row}";
        Console.WriteLine(range);
        var setValue = new List<List<object>> { new List<object> { this.type, this.summ,this.what,this.comm,this.person,this.month,this.date.ToString("dd.MM.yyyy"),this.fond,this.number_month} };
        var req = service.Spreadsheets.Values.Update(

            new Google.Apis.Sheets.v4.Data.ValueRange { Values = new List<IList<object>>(setValue) }, "1r3UZ4Hh3d2FepCK3N2pBccXVh2YCek0bSYb8pR82G_w", range);
        req.ValueInputOption = SpreadsheetsResource.ValuesResource.UpdateRequest.ValueInputOptionEnum.USERENTERED;
        var res = req.Execute();
        this.sub = "Успешно";
    }

}
